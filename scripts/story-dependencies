#!/usr/bin/env python3
import os
import textwrap
from dataclasses import dataclass

import networkx
import requests


def get(path, token):
    headers = {"Shortcut-Token": token}
    resp = requests.get(f"https://api.app.shortcut.com/api/v3{path}", headers=headers)
    resp.raise_for_status()
    return resp.json()


@dataclass(frozen=True)
class Story:
    id: str
    name: str
    started: bool
    completed: bool
    archived: bool
    dependencies: list[str]


def get_stories(shortcut_token, epic):
    epics = get("/epics", shortcut_token)
    epic = list(filter(lambda e: e["name"] == epic, epics))[0]
    stories = get(f"/epics/{epic['id']}/stories", shortcut_token)

    def convert(story):
        dependencies = []
        for link in story["story_links"]:
            if link["verb"] == "blocks" and link["subject_id"] == story["id"]:
                dependencies.append(link["object_id"])
        return Story(story["id"], story["name"], story["started"], story["completed"], story["archived"], dependencies)

    return list(map(convert, stories))


def build_graph(stories):
    graph = networkx.DiGraph()
    story_map = {}

    for story in stories:
        if story.archived:
            continue
        graph.add_node(story.id)
        story_map[story.id] = story

    for story in stories:
        for dependency in story.dependencies:
            graph.add_edge(story.id, dependency)

    return graph, story_map


def print_dot(graph, story_map):
    print("digraph G {")
    print("    node [colorscheme=paired4, shape=box, style=rounded]")
    print("    edge [color=grey]")

    completed_box_colour, completed_font_colour = "1", "1"
    started_box_colour, started_font_colour = "2", "2"
    ready_box_colour, ready_font_colour = "4", "4"
    blocked_box_colour, blocked_font_colour = "3", "3"

    for story in story_map.values():
        dependencies = [story_map[dependency] for dependency in graph.predecessors(story.id)]
        blocked = any(not dependency.completed for dependency in dependencies)

        name = story.name.replace('"', "'")
        label = textwrap.fill(f"{story.id}: {name}", width=20)

        if story.completed:
            box_colour, font_colour = completed_box_colour, completed_font_colour
        elif story.started:
            box_colour, font_colour = started_box_colour, started_font_colour
        elif not blocked:
            box_colour, font_colour = ready_box_colour, ready_font_colour
        else:
            box_colour, font_colour = blocked_box_colour, blocked_font_colour

        print(f'    {story.id} [label="{label}", color={box_colour}, fontcolor={font_colour}]')

        for dependency in dependencies:
            print(f"    {dependency.id} -> {story.id}")

    print("    subgraph cluster_0 {")
    print("        label=Key; fontcolor=dimgrey; color=grey")
    print(f'        completed [label="Completed", color={completed_box_colour}, fontcolor={completed_font_colour}]')
    print(f'        started [label="Started", color={started_box_colour}, fontcolor={started_font_colour}]')
    print(f'        ready [label="Ready", color={ready_box_colour}, fontcolor={ready_font_colour}]')
    print(f'        blocked [label="Blocked", color={blocked_box_colour}, fontcolor={blocked_font_colour}]')
    print("        completed -> started -> ready -> blocked")
    print("    }")

    print("}")


def main(shortcut_token, epic):
    stories = get_stories(shortcut_token, epic)
    graph, story_map = build_graph(stories)
    print_dot(graph, story_map)


if __name__ == "__main__":
    main(os.environ["SHORTCUT_TOKEN"], os.environ["SHORTCUT_EPIC"])
