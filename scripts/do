#!/bin/bash
# shellcheck source=../.venv/bin/activate

# This is the base script to call all other commands

set -euo pipefail

# Find the project root directory
PYTHON_VERSION="${PYTHON_VERSION:-python3.9}"
BASE_DIR="$(git rev-parse --show-toplevel)"
command="$1"
other_args="${*:2}"

echo "Doing $command"

ensure_virtual_env () {
  # look for VIRTUAL_ENV variable; create virtualenv in .venv in this directory if not found
  # activate it
  echo "Ensuring virtual environment is set up and activated"
  if [[ ! -v VIRTUAL_ENV ]]; then
    if [[ ! -f "$BASE_DIR/.venv/bin/activate" ]]; then
        echo "venv does not exist, creating it at $BASE_DIR/.venv"
        "$PYTHON_VERSION" -m pip install --upgrade pip
        "$PYTHON_VERSION" -m venv "$BASE_DIR"/.venv
    fi
    echo "Activating virtual env"
    . "$BASE_DIR/.venv/bin/activate"
  fi
}

dev_setup () {
  ensure_virtual_env

  # Ensure pip-tools has been installed
  if [[ ! -f "$VIRTUAL_ENV/bin/pip-compile" ]]; then
    echo "Installing pip tools"
    "$VIRTUAL_ENV"/bin/pip install pip-tools
  fi

  # Ensure dev requirements have been installed; black should be a requirement of every project, so if it isn't present
  # yet, assure we need to install them all
  if [[ ! -f "$VIRTUAL_ENV/bin/black" ]]; then
    echo "Installing dev requirements"
    "$VIRTUAL_ENV"/bin/pip install --require-hashes -r requirements.dev.txt
  fi

  # Ensure pre-commit has been set up
  if [[ ! -f "$BASE_DIR/.git/hooks/pre-commit" ]]; then
    echo "Setting up pre-commit hooks"
    "$VIRTUAL_ENV"/bin/pre-commit install
  fi

  # set PYTHONPATH
  export PYTHONPATH="$BASE_DIR"
}

check () {
  dev_setup
  echo "Checking black, isort and flake8"
  just check
}

fix () {
  dev_setup
  echo "Running black and isort"
  just fix
}

setup () {
  echo "Setting up environment"
  # Implement production setup
}

run () {
  dev_setup
  echo "Running..."
  # Implement run for this project
}

update() {
  dev_setup
  echo "Updating and installing requirements"
  target="${other_args[0]:-prod}"
  "$VIRTUAL_ENV"/bin/pip-compile --generate-hashes --output-file=requirements."$target".txt requirements."$target".in && \
    "$VIRTUAL_ENV"/bin/pip install -r requirements."$target".txt
}

test_unit () {
  dev_setup
  just test-unit "$other_args"
}

test_e2e () {
  dev_setup
  just test-e2e "$other_args"
}

test () {
  dev_setup
  just test-all "$other_args"
}


case $command in
  "help")
    echo "Usage:"
    echo "    ./scripts/help             prints this help."
    echo "    ./scripts/check            runs the format (black), sort (isort) and lint (flake8) check but does not change any files"
    echo "    ./scripts/fix              fix formatting and import sort ordering."
    echo "    ./scripts/setup            set up production environment."
    echo "    ./scripts/dev_setup        set up/update the local dev env."
    echo "    ./scripts/run              run the dev project."
    echo "    ./scripts/test_unit <args>      run the unit tests only. Optional args are passed to pytest."
    echo "    ./scripts/test_e2e <args>      run the end-to-end tests only. Optional args are passed to pytest."
    echo "    ./scripts/test <args>      run the full test suite. Optional args are passed to pytest."
    echo "    ./scripts/update <target>  compile and update python dependencies.  <target> specifies an environment to update (dev/prod)."
  ;;

  "check")
    check
    ;;
  "fix")
    fix
    ;;
  "dev_setup")
    dev_setup
    ;;
  "setup")
    setup
    ;;
  "update")
    update
    ;;
  "test")
    test
    ;;
  "test_e2e")
    test_e2e
    ;;
  "test_unit")
    test_unit
    ;;
  "run")
    run
    ;;

esac
