[('Cursor', 'execute', ('select @@version', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor',
  'fetchone',
  (),
  {},
  ('Microsoft SQL Server 2017 (RTM-CU23) (KB5000685) - 14.0.3381.3 (X64) \n'
   '\tFeb  9 2021 12:08:50 \n'
   '\tCopyright (C) 2017 Microsoft Corporation\n'
   '\tDeveloper Edition (64-bit) on Linux (Ubuntu 16.04.7 LTS)',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor', 'execute', ('SELECT schema_name()', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('dbo',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   '                  SELECT CASE transaction_isolation_level\n'
   '                    WHEN 0 THEN NULL\n'
   "                    WHEN 1 THEN 'READ UNCOMMITTED'\n"
   "                    WHEN 2 THEN 'READ COMMITTED'\n"
   "                    WHEN 3 THEN 'REPEATABLE READ'\n"
   "                    WHEN 4 THEN 'SERIALIZABLE'\n"
   "                    WHEN 5 THEN 'SNAPSHOT' END AS "
   'TRANSACTION_ISOLATION_LEVEL\n'
   '                    FROM sys.dm_exec_sessions\n'
   '                    where session_id = @@SPID\n'
   '                  ',),
  {},
  None),
 ('Cursor', 'fetchone', (), {}, ('READ COMMITTED',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ("SELECT CAST('test max support' AS NVARCHAR(max))", {}),
  {},
  None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('test max support',)),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor',
  'execute',
  ('DROP TABLE IF EXISTS events, practice_registrations;\n'
   'CREATE TABLE events (PatientId int, Date varchar(255), EventCode '
   'varchar(255));\n'
   "INSERT INTO events (PatientId, Date, EventCode) VALUES (1, '2021-01-01', "
   "'xyz');\n"
   'CREATE TABLE practice_registrations (PatientId int);\n'
   'INSERT INTO practice_registrations (PatientId) VALUES (1);\n',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor', 'rowcount', (), {}, 1),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor', 'execute', ('select @@version', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor',
  'fetchone',
  (),
  {},
  ('Microsoft SQL Server 2017 (RTM-CU23) (KB5000685) - 14.0.3381.3 (X64) \n'
   '\tFeb  9 2021 12:08:50 \n'
   '\tCopyright (C) 2017 Microsoft Corporation\n'
   '\tDeveloper Edition (64-bit) on Linux (Ubuntu 16.04.7 LTS)',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor', 'execute', ('SELECT schema_name()', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('dbo',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   '                  SELECT CASE transaction_isolation_level\n'
   '                    WHEN 0 THEN NULL\n'
   "                    WHEN 1 THEN 'READ UNCOMMITTED'\n"
   "                    WHEN 2 THEN 'READ COMMITTED'\n"
   "                    WHEN 3 THEN 'REPEATABLE READ'\n"
   "                    WHEN 4 THEN 'SERIALIZABLE'\n"
   "                    WHEN 5 THEN 'SNAPSHOT' END AS "
   'TRANSACTION_ISOLATION_LEVEL\n'
   '                    FROM sys.dm_exec_sessions\n'
   '                    where session_id = @@SPID\n'
   '                  ',),
  {},
  None),
 ('Cursor', 'fetchone', (), {}, ('READ COMMITTED',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ("SELECT CAST('test max support' AS NVARCHAR(max))", {}),
  {},
  None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('test max support',)),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO group_table_0 FROM (\n'
   'SELECT clinical_events.date, clinical_events.patient_id \n'
   'FROM (SELECT EventCode AS code, Date AS date, PatientId AS patient_id \n'
   'FROM events) AS clinical_events\n'
   ') t\n'
   '\n'
   '\n'
   'SELECT * INTO group_table_1 FROM (\n'
   'SELECT clinical_events.code, clinical_events.patient_id \n'
   'FROM (SELECT EventCode AS code, Date AS date, PatientId AS patient_id \n'
   'FROM events) AS clinical_events\n'
   ') t\n'
   '\n'
   '\n'
   'SELECT * INTO group_table_2 FROM (\n'
   'SELECT practice_registrations.patient_id, 1 AS patient_id_exists \n'
   'FROM (SELECT PatientId AS patient_id \n'
   'FROM practice_registrations) AS practice_registrations GROUP BY '
   'practice_registrations.patient_id\n'
   ') t\n'
   '\n'
   '\n'
   'SELECT group_table_2.patient_id AS patient_id, group_table_0.date AS date, '
   'group_table_1.code AS event \n'
   'FROM group_table_2 LEFT OUTER JOIN group_table_0 ON '
   'group_table_2.patient_id = group_table_0.patient_id LEFT OUTER JOIN '
   'group_table_1 ON group_table_2.patient_id = group_table_1.patient_id \n'
   'WHERE group_table_2.patient_id_exists = 1',
   {}),
  {},
  None),
 ('Cursor',
  'description',
  (),
  {},
  (('patient_id', 3, None, None, None, None, None),
   ('date', 1, None, None, None, None, None),
   ('event', 1, None, None, None, None, None))),
 ('Cursor', 'fetchone', (), {}, (1, '2021-01-01', 'xyz')),
 ('Cursor', 'fetchone', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None)]
