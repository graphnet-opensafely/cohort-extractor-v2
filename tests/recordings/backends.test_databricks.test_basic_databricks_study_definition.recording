[('Cursor', 'execute', ('select @@version', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor',
  'fetchone',
  (),
  {},
  ('Microsoft SQL Server 2017 (RTM-CU25) (KB5003830) - 14.0.3401.7 (X64) \n'
   '\tJun 25 2021 14:02:48 \n'
   '\tCopyright (C) 2017 Microsoft Corporation\n'
   '\tDeveloper Edition (64-bit) on Linux (Ubuntu 16.04.7 LTS)',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor', 'execute', ('SELECT schema_name()', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('dbo',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   '                  SELECT CASE transaction_isolation_level\n'
   '                    WHEN 0 THEN NULL\n'
   "                    WHEN 1 THEN 'READ UNCOMMITTED'\n"
   "                    WHEN 2 THEN 'READ COMMITTED'\n"
   "                    WHEN 3 THEN 'REPEATABLE READ'\n"
   "                    WHEN 4 THEN 'SERIALIZABLE'\n"
   "                    WHEN 5 THEN 'SNAPSHOT' END AS "
   'TRANSACTION_ISOLATION_LEVEL\n'
   '                    FROM sys.dm_exec_sessions\n'
   '                    where session_id = @@SPID\n'
   '                  ',),
  {},
  None),
 ('Cursor', 'fetchone', (), {}, ('READ COMMITTED',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ("SELECT CAST('test max support' AS NVARCHAR(max))", {}),
  {},
  None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('test max support',)),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   'CREATE TABLE [#codelist_0] (\n'
   '\tcode VARCHAR(4) COLLATE Latin1_General_BIN NOT NULL, \n'
   '\tsystem VARCHAR(6) NOT NULL\n'
   ')\n'
   '\n',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('INSERT INTO [#codelist_0] (code, system) VALUES (%(code_m0)s, '
   '%(system_m0)s), (%(code_m1)s, %(system_m1)s)',
   {'code_m0': '0010',
    'system_m0': 'dmd',
    'code_m1': '0050',
    'system_m1': 'dmd'}),
  {},
  None),
 ('Cursor', 'rowcount', (), {}, 2),
 ('Cursor', 'description', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_0 \n'
   'FROM (SELECT patients.patient_id AS patient_id, %(param_1)s AS '
   'patient_id_exists \n'
   'FROM (\n'
   '        SELECT\n'
   '            Person_ID AS patient_id, MAX(PatientDoB) AS date_of_birth\n'
   '        FROM\n'
   '            PCAREMEDS_pcaremeds\n'
   '        GROUP BY\n'
   '            Person_ID\n'
   '        ) AS patients GROUP BY patients.patient_id) AS anon_1',
   {'param_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_1 \n'
   'FROM (SELECT anon_2.date_of_birth AS date_of_birth, anon_2.patient_id AS '
   'patient_id \n'
   'FROM (SELECT patients.date_of_birth AS date_of_birth, patients.patient_id '
   'AS patient_id, row_number() OVER (PARTITION BY patients.patient_id ORDER '
   'BY patients.patient_id) AS _row_num \n'
   'FROM (\n'
   '        SELECT\n'
   '            Person_ID AS patient_id, MAX(PatientDoB) AS date_of_birth\n'
   '        FROM\n'
   '            PCAREMEDS_pcaremeds\n'
   '        GROUP BY\n'
   '            Person_ID\n'
   '        ) AS patients) AS anon_2 \n'
   'WHERE anon_2._row_num = %(row_num_1)s) AS anon_1',
   {'row_num_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_2 \n'
   'FROM (SELECT prescriptions.patient_id AS patient_id, %(param_1)s AS '
   'patient_id_exists \n'
   'FROM (SELECT [Person_ID] AS patient_id, [PrescribeddmdCode] AS '
   'prescribed_dmd_code, [ProcessingPeriodDate] AS processing_date \n'
   'FROM [PCAREMEDS_pcaremeds]) AS prescriptions \n'
   'WHERE prescriptions.processing_date >= %(processing_date_1)s AND '
   'prescriptions.processing_date <= %(processing_date_2)s AND '
   'prescriptions.prescribed_dmd_code IN (SELECT [#codelist_0].code \n'
   'FROM [#codelist_0]) GROUP BY prescriptions.patient_id) AS anon_1',
   {'param_1': 1,
    'processing_date_1': '20200101',
    'processing_date_2': '20200131'}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_3 \n'
   'FROM (SELECT hospital_admissions.patient_id AS patient_id, %(param_1)s AS '
   'patient_id_exists \n'
   'FROM (\n'
   '            SELECT\n'
   '                mps.PERSON_ID AS patient_id,\n'
   '                apc.ADMIDATE AS admission_date,\n'
   '                apc.DIAG_4_01 AS primary_diagnosis,\n'
   '                apc.ADMINMETH AS admission_method,\n'
   '                apc.FAE AS episode_is_finished,\n'
   '                apc_otr.SUSSPELLID AS spell_id\n'
   '            FROM\n'
   '                HES_AHAS_hes_apc_1920 AS apc\n'
   '            JOIN\n'
   '                HES_AHAS_MPS_hes_apc_1920 AS mps\n'
   '            ON\n'
   '                apc.EPIKEY = mps.EPIKEY\n'
   '            LEFT JOIN\n'
   '                HES_AHAS_hes_apc_otr_1920 AS apc_otr\n'
   '            ON\n'
   '                apc.EPIKEY = apc_otr.EPIKEY\n'
   '            ) AS hospital_admissions \n'
   'WHERE hospital_admissions.admission_date >= %(admission_date_1)s AND '
   'hospital_admissions.admission_date <= %(admission_date_2)s AND '
   'hospital_admissions.primary_diagnosis = %(primary_diagnosis_1)s AND '
   'hospital_admissions.episode_is_finished = 1 AND '
   'hospital_admissions.admission_method >= %(admission_method_1)s AND '
   'hospital_admissions.admission_method <= %(admission_method_2)s GROUP BY '
   'hospital_admissions.patient_id) AS anon_1',
   {'param_1': 1,
    'admission_date_1': '20200101',
    'admission_date_2': '20200131',
    'primary_diagnosis_1': 'N05',
    'admission_method_1': 20,
    'admission_method_2': 29}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT [#group_table_0].patient_id AS patient_id, '
   '[#group_table_1].date_of_birth AS dob, [#group_table_2].patient_id_exists '
   'AS prescribed_med, [#group_table_3].patient_id_exists AS admitted \n'
   'FROM [#group_table_0] LEFT OUTER JOIN [#group_table_1] ON '
   '[#group_table_0].patient_id = [#group_table_1].patient_id LEFT OUTER JOIN '
   '[#group_table_2] ON [#group_table_0].patient_id = '
   '[#group_table_2].patient_id LEFT OUTER JOIN [#group_table_3] ON '
   '[#group_table_0].patient_id = [#group_table_3].patient_id \n'
   'WHERE [#group_table_0].patient_id_exists = 1',
   {}),
  {},
  None),
 ('Cursor',
  'description',
  (),
  {},
  (('patient_id', 3, None, None, None, None, None),
   ('dob', 2, None, None, None, None, None),
   ('prescribed_med', 3, None, None, None, None, None),
   ('admitted', 3, None, None, None, None, None))),
 ('Cursor', 'fetchone', (), {}, (10, datetime.date(1950, 8, 20), None, 1)),
 ('Cursor', 'fetchone', (), {}, (15, datetime.date(1955, 7, 17), 1, None)),
 ('Cursor', 'fetchone', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None)]
