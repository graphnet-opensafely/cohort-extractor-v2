[('Cursor', 'execute', ('select @@version', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor',
  'fetchone',
  (),
  {},
  ('Microsoft SQL Server 2017 (RTM-CU25) (KB5003830) - 14.0.3401.7 (X64) \n'
   '\tJun 25 2021 14:02:48 \n'
   '\tCopyright (C) 2017 Microsoft Corporation\n'
   '\tDeveloper Edition (64-bit) on Linux (Ubuntu 16.04.7 LTS)',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor', 'execute', ('SELECT schema_name()', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('dbo',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   '                  SELECT CASE transaction_isolation_level\n'
   '                    WHEN 0 THEN NULL\n'
   "                    WHEN 1 THEN 'READ UNCOMMITTED'\n"
   "                    WHEN 2 THEN 'READ COMMITTED'\n"
   "                    WHEN 3 THEN 'REPEATABLE READ'\n"
   "                    WHEN 4 THEN 'SERIALIZABLE'\n"
   "                    WHEN 5 THEN 'SNAPSHOT' END AS "
   'TRANSACTION_ISOLATION_LEVEL\n'
   '                    FROM sys.dm_exec_sessions\n'
   '                    where session_id = @@SPID\n'
   '                  ',),
  {},
  None),
 ('Cursor', 'fetchone', (), {}, ('READ COMMITTED',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ("SELECT CAST('test max support' AS NVARCHAR(max))", {}),
  {},
  None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('test max support',)),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_0 FROM (\n'
   'SELECT anon_1.code, anon_1.patient_id \n'
   'FROM (SELECT clinical_events.code AS code, clinical_events.patient_id AS '
   'patient_id, row_number() OVER (PARTITION BY clinical_events.patient_id '
   'ORDER BY clinical_events.date DESC) AS _row_num \n'
   'FROM (SELECT EventCode AS code, Date AS date, ResultValue AS result, '
   'PatientId AS patient_id \n'
   'FROM events) AS clinical_events \n'
   "WHERE clinical_events.code IN (N'abc', N'def')) AS anon_1 \n"
   'WHERE anon_1._row_num = 1\n'
   ') t\n'
   '\n'
   '\n'
   'SELECT * INTO #group_table_1 FROM (\n'
   'SELECT positive_tests.patient_id, 1 AS patient_id_exists \n'
   'FROM (SELECT PositiveResult AS result, TestDate AS test_date, PatientId AS '
   'patient_id \n'
   'FROM pos_tests) AS positive_tests \n'
   'WHERE positive_tests.result = 1 GROUP BY positive_tests.patient_id\n'
   ') t\n'
   '\n'
   '\n'
   'SELECT * INTO #group_table_2 FROM (\n'
   'SELECT practice_registrations.patient_id, 1 AS patient_id_exists \n'
   'FROM (SELECT StpId AS stp, StartDate AS date_start, EndDate AS date_end, '
   'PatientId AS patient_id \n'
   'FROM practice_registrations) AS practice_registrations GROUP BY '
   'practice_registrations.patient_id\n'
   ') t\n'
   '\n'
   '\n'
   'SELECT [#group_table_2].patient_id AS patient_id, CASE WHEN '
   '([#group_table_0].code IS NOT NULL AND [#group_table_1].patient_id_exists '
   "IS NOT NULL) THEN N'yes' ELSE N'na' END AS has_positive_code \n"
   'FROM [#group_table_2] LEFT OUTER JOIN [#group_table_0] ON '
   '[#group_table_2].patient_id = [#group_table_0].patient_id LEFT OUTER JOIN '
   '[#group_table_1] ON [#group_table_2].patient_id = '
   '[#group_table_1].patient_id \n'
   'WHERE [#group_table_2].patient_id_exists = 1',
   {}),
  {},
  None),
 ('Cursor',
  'description',
  (),
  {},
  (('patient_id', 3, None, None, None, None, None),
   ('has_positive_code', 1, None, None, None, None, None))),
 ('Cursor', 'fetchone', (), {}, (1, 'yes')),
 ('Cursor', 'fetchone', (), {}, (2, 'na')),
 ('Cursor', 'fetchone', (), {}, (3, 'na')),
 ('Cursor', 'fetchone', (), {}, (4, 'yes')),
 ('Cursor', 'fetchone', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None)]
