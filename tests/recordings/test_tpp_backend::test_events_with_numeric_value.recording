[('Cursor', 'execute', ('select @@version', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor',
  'fetchone',
  (),
  {},
  ('Microsoft SQL Server 2017 (RTM-CU25) (KB5003830) - 14.0.3401.7 (X64) \n'
   '\tJun 25 2021 14:02:48 \n'
   '\tCopyright (C) 2017 Microsoft Corporation\n'
   '\tDeveloper Edition (64-bit) on Linux (Ubuntu 16.04.7 LTS)',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor', 'execute', ('SELECT schema_name()', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('dbo',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   '                  SELECT CASE transaction_isolation_level\n'
   '                    WHEN 0 THEN NULL\n'
   "                    WHEN 1 THEN 'READ UNCOMMITTED'\n"
   "                    WHEN 2 THEN 'READ COMMITTED'\n"
   "                    WHEN 3 THEN 'REPEATABLE READ'\n"
   "                    WHEN 4 THEN 'SERIALIZABLE'\n"
   "                    WHEN 5 THEN 'SNAPSHOT' END AS "
   'TRANSACTION_ISOLATION_LEVEL\n'
   '                    FROM sys.dm_exec_sessions\n'
   '                    where session_id = @@SPID\n'
   '                  ',),
  {},
  None),
 ('Cursor', 'fetchone', (), {}, ('READ COMMITTED',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ("SELECT CAST('test max support' AS NVARCHAR(max))", {}),
  {},
  None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('test max support',)),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_0 \n'
   'FROM (SELECT anon_2.numeric_value AS numeric_value, anon_2.patient_id AS '
   'patient_id \n'
   'FROM (SELECT clinical_events.numeric_value AS numeric_value, '
   'clinical_events.patient_id AS patient_id, row_number() OVER (PARTITION BY '
   'clinical_events.patient_id ORDER BY clinical_events.date DESC) AS '
   '_row_num \n'
   'FROM (SELECT [CTV3Code] AS code, [ConsultationDate] AS date, '
   '[NumericValue] AS numeric_value, [Patient_ID] AS patient_id \n'
   'FROM [CodedEvent]) AS clinical_events) AS anon_2 \n'
   'WHERE anon_2._row_num = %(row_num_1)s) AS anon_1',
   {'row_num_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_1 \n'
   'FROM (SELECT practice_registrations.patient_id AS patient_id, %(param_1)s '
   'AS patient_id_exists \n'
   'FROM (\n'
   '            SELECT RegistrationHistory.Patient_ID AS patient_id,\n'
   '                RegistrationHistory.StartDate AS date_start,\n'
   '                RegistrationHistory.EndDate AS date_end,\n'
   '                Organisation.Organisation_ID AS pseudo_id,\n'
   '                Organisation.Region as nuts1_region_name\n'
   '            FROM RegistrationHistory\n'
   '            LEFT OUTER JOIN Organisation ON '
   'RegistrationHistory.Organisation_ID = Organisation.Organisation_ID\n'
   '        ) AS practice_registrations GROUP BY '
   'practice_registrations.patient_id) AS anon_1',
   {'param_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT [#group_table_1].patient_id AS patient_id, '
   '[#group_table_0].numeric_value AS value \n'
   'FROM [#group_table_1] LEFT OUTER JOIN [#group_table_0] ON '
   '[#group_table_1].patient_id = [#group_table_0].patient_id \n'
   'WHERE [#group_table_1].patient_id_exists = 1',
   {}),
  {},
  None),
 ('Cursor',
  'description',
  (),
  {},
  (('patient_id', 3, None, None, None, None, None),
   ('value', 3, None, None, None, None, None))),
 ('Cursor', 'fetchone', (), {}, (1, 34.7)),
 ('Cursor', 'fetchone', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None)]
