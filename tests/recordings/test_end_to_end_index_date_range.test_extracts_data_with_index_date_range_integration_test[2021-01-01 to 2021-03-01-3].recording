[('Cursor', 'execute', ('select @@version', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor',
  'fetchone',
  (),
  {},
  ('Microsoft SQL Server 2017 (RTM-CU25) (KB5003830) - 14.0.3401.7 (X64) \n'
   '\tJun 25 2021 14:02:48 \n'
   '\tCopyright (C) 2017 Microsoft Corporation\n'
   '\tDeveloper Edition (64-bit) on Linux (Ubuntu 16.04.7 LTS)',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor', 'execute', ('SELECT schema_name()', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('dbo',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   '                  SELECT CASE transaction_isolation_level\n'
   '                    WHEN 0 THEN NULL\n'
   "                    WHEN 1 THEN 'READ UNCOMMITTED'\n"
   "                    WHEN 2 THEN 'READ COMMITTED'\n"
   "                    WHEN 3 THEN 'REPEATABLE READ'\n"
   "                    WHEN 4 THEN 'SERIALIZABLE'\n"
   "                    WHEN 5 THEN 'SNAPSHOT' END AS "
   'TRANSACTION_ISOLATION_LEVEL\n'
   '                    FROM sys.dm_exec_sessions\n'
   '                    where session_id = @@SPID\n'
   '                  ',),
  {},
  None),
 ('Cursor', 'fetchone', (), {}, ('READ COMMITTED',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ("SELECT CAST('test max support' AS NVARCHAR(max))", {}),
  {},
  None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('test max support',)),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO temp_tables..TempExtract_test__pytest123 \n'
   'FROM (SELECT %(param_1)s AS foo) AS anon_1',
   {'param_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('\nDROP TABLE temp_tables..TempExtract_test__pytest123', {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_0 \n'
   'FROM (SELECT practice_registrations.patient_id AS patient_id, %(param_1)s '
   'AS patient_id_exists \n'
   'FROM (\n'
   '            SELECT RegistrationHistory.Patient_ID AS patient_id,\n'
   '                RegistrationHistory.StartDate AS date_start,\n'
   '                RegistrationHistory.EndDate AS date_end,\n'
   '                Organisation.Organisation_ID AS pseudo_id,\n'
   '                Organisation.Region as nuts1_region_name\n'
   '            FROM RegistrationHistory\n'
   '            LEFT OUTER JOIN Organisation ON '
   'RegistrationHistory.Organisation_ID = Organisation.Organisation_ID\n'
   '        ) AS practice_registrations \n'
   'WHERE practice_registrations.date_start <= %(date_start_1)s AND '
   'practice_registrations.date_end >= %(date_end_1)s GROUP BY '
   'practice_registrations.patient_id) AS anon_1',
   {'param_1': 1,
    'date_start_1': '2021-03-01T00:00:00',
    'date_end_1': '2021-03-01T00:00:00'}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_1 \n'
   'FROM (SELECT anon_2.date AS date, anon_2.patient_id AS patient_id \n'
   'FROM (SELECT clinical_events.date AS date, clinical_events.patient_id AS '
   'patient_id, row_number() OVER (PARTITION BY clinical_events.patient_id '
   'ORDER BY clinical_events.patient_id) AS _row_num \n'
   'FROM (SELECT [CTV3Code] AS code, [ConsultationDate] AS date, '
   '[NumericValue] AS numeric_value, [Patient_ID] AS patient_id \n'
   'FROM [CodedEvent]) AS clinical_events) AS anon_2 \n'
   'WHERE anon_2._row_num = %(row_num_1)s) AS anon_1',
   {'row_num_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_2 \n'
   'FROM (SELECT anon_2.code AS code, anon_2.patient_id AS patient_id \n'
   'FROM (SELECT clinical_events.code AS code, clinical_events.patient_id AS '
   'patient_id, row_number() OVER (PARTITION BY clinical_events.patient_id '
   'ORDER BY clinical_events.patient_id) AS _row_num \n'
   'FROM (SELECT [CTV3Code] AS code, [ConsultationDate] AS date, '
   '[NumericValue] AS numeric_value, [Patient_ID] AS patient_id \n'
   'FROM [CodedEvent]) AS clinical_events) AS anon_2 \n'
   'WHERE anon_2._row_num = %(row_num_1)s) AS anon_1',
   {'row_num_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO temp_tables..TempExtract_7658ee339c73c9a7723c1447fec4e83d \n'
   'FROM (SELECT [#group_table_0].patient_id AS patient_id, '
   '[#group_table_1].date AS date, [#group_table_2].code AS event \n'
   'FROM [#group_table_0] LEFT OUTER JOIN [#group_table_1] ON '
   '[#group_table_0].patient_id = [#group_table_1].patient_id LEFT OUTER JOIN '
   '[#group_table_2] ON [#group_table_0].patient_id = '
   '[#group_table_2].patient_id \n'
   'WHERE [#group_table_0].patient_id_exists = 1) AS anon_1',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('CREATE INDEX '
   '[ix_temp_tables..TempExtract_7658ee339c73c9a7723c1447fec4e83d_patient_id] '
   'ON temp_tables..TempExtract_7658ee339c73c9a7723c1447fec4e83d (patient_id)',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT TOP 32000 * \n'
   'FROM temp_tables..TempExtract_7658ee339c73c9a7723c1447fec4e83d ORDER BY '
   'patient_id',
   {}),
  {},
  None),
 ('Cursor',
  'description',
  (),
  {},
  (('patient_id', 3, None, None, None, None, None),
   ('date', 4, None, None, None, None, None),
   ('event', 1, None, None, None, None, None))),
 ('Cursor', 'fetchone', (), {}, (1, FakeDatetime(2020, 1, 1, 0, 0), 'abc')),
 ('Cursor', 'fetchone', (), {}, (2, FakeDatetime(2020, 2, 1, 0, 0), 'def')),
 ('Cursor', 'fetchone', (), {}, (3, FakeDatetime(2020, 3, 1, 0, 0), 'ghi')),
 ('Cursor', 'fetchone', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   'DROP TABLE IF EXISTS '
   'temp_tables..TempExtract_7658ee339c73c9a7723c1447fec4e83d',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor', 'execute', ('select @@version', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor',
  'fetchone',
  (),
  {},
  ('Microsoft SQL Server 2017 (RTM-CU25) (KB5003830) - 14.0.3401.7 (X64) \n'
   '\tJun 25 2021 14:02:48 \n'
   '\tCopyright (C) 2017 Microsoft Corporation\n'
   '\tDeveloper Edition (64-bit) on Linux (Ubuntu 16.04.7 LTS)',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor', 'execute', ('SELECT schema_name()', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('dbo',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   '                  SELECT CASE transaction_isolation_level\n'
   '                    WHEN 0 THEN NULL\n'
   "                    WHEN 1 THEN 'READ UNCOMMITTED'\n"
   "                    WHEN 2 THEN 'READ COMMITTED'\n"
   "                    WHEN 3 THEN 'REPEATABLE READ'\n"
   "                    WHEN 4 THEN 'SERIALIZABLE'\n"
   "                    WHEN 5 THEN 'SNAPSHOT' END AS "
   'TRANSACTION_ISOLATION_LEVEL\n'
   '                    FROM sys.dm_exec_sessions\n'
   '                    where session_id = @@SPID\n'
   '                  ',),
  {},
  None),
 ('Cursor', 'fetchone', (), {}, ('READ COMMITTED',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ("SELECT CAST('test max support' AS NVARCHAR(max))", {}),
  {},
  None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('test max support',)),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO temp_tables..TempExtract_test__pytest123 \n'
   'FROM (SELECT %(param_1)s AS foo) AS anon_1',
   {'param_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('\nDROP TABLE temp_tables..TempExtract_test__pytest123', {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_0 \n'
   'FROM (SELECT practice_registrations.patient_id AS patient_id, %(param_1)s '
   'AS patient_id_exists \n'
   'FROM (\n'
   '            SELECT RegistrationHistory.Patient_ID AS patient_id,\n'
   '                RegistrationHistory.StartDate AS date_start,\n'
   '                RegistrationHistory.EndDate AS date_end,\n'
   '                Organisation.Organisation_ID AS pseudo_id,\n'
   '                Organisation.Region as nuts1_region_name\n'
   '            FROM RegistrationHistory\n'
   '            LEFT OUTER JOIN Organisation ON '
   'RegistrationHistory.Organisation_ID = Organisation.Organisation_ID\n'
   '        ) AS practice_registrations \n'
   'WHERE practice_registrations.date_start <= %(date_start_1)s AND '
   'practice_registrations.date_end >= %(date_end_1)s GROUP BY '
   'practice_registrations.patient_id) AS anon_1',
   {'param_1': 1,
    'date_start_1': '2021-02-01T00:00:00',
    'date_end_1': '2021-02-01T00:00:00'}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_1 \n'
   'FROM (SELECT anon_2.date AS date, anon_2.patient_id AS patient_id \n'
   'FROM (SELECT clinical_events.date AS date, clinical_events.patient_id AS '
   'patient_id, row_number() OVER (PARTITION BY clinical_events.patient_id '
   'ORDER BY clinical_events.patient_id) AS _row_num \n'
   'FROM (SELECT [CTV3Code] AS code, [ConsultationDate] AS date, '
   '[NumericValue] AS numeric_value, [Patient_ID] AS patient_id \n'
   'FROM [CodedEvent]) AS clinical_events) AS anon_2 \n'
   'WHERE anon_2._row_num = %(row_num_1)s) AS anon_1',
   {'row_num_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_2 \n'
   'FROM (SELECT anon_2.code AS code, anon_2.patient_id AS patient_id \n'
   'FROM (SELECT clinical_events.code AS code, clinical_events.patient_id AS '
   'patient_id, row_number() OVER (PARTITION BY clinical_events.patient_id '
   'ORDER BY clinical_events.patient_id) AS _row_num \n'
   'FROM (SELECT [CTV3Code] AS code, [ConsultationDate] AS date, '
   '[NumericValue] AS numeric_value, [Patient_ID] AS patient_id \n'
   'FROM [CodedEvent]) AS clinical_events) AS anon_2 \n'
   'WHERE anon_2._row_num = %(row_num_1)s) AS anon_1',
   {'row_num_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO temp_tables..TempExtract_1f06e21d4a92c1896777b62d5c049705 \n'
   'FROM (SELECT [#group_table_0].patient_id AS patient_id, '
   '[#group_table_1].date AS date, [#group_table_2].code AS event \n'
   'FROM [#group_table_0] LEFT OUTER JOIN [#group_table_1] ON '
   '[#group_table_0].patient_id = [#group_table_1].patient_id LEFT OUTER JOIN '
   '[#group_table_2] ON [#group_table_0].patient_id = '
   '[#group_table_2].patient_id \n'
   'WHERE [#group_table_0].patient_id_exists = 1) AS anon_1',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('CREATE INDEX '
   '[ix_temp_tables..TempExtract_1f06e21d4a92c1896777b62d5c049705_patient_id] '
   'ON temp_tables..TempExtract_1f06e21d4a92c1896777b62d5c049705 (patient_id)',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT TOP 32000 * \n'
   'FROM temp_tables..TempExtract_1f06e21d4a92c1896777b62d5c049705 ORDER BY '
   'patient_id',
   {}),
  {},
  None),
 ('Cursor',
  'description',
  (),
  {},
  (('patient_id', 3, None, None, None, None, None),
   ('date', 4, None, None, None, None, None),
   ('event', 1, None, None, None, None, None))),
 ('Cursor', 'fetchone', (), {}, (1, FakeDatetime(2020, 1, 1, 0, 0), 'abc')),
 ('Cursor', 'fetchone', (), {}, (2, FakeDatetime(2020, 2, 1, 0, 0), 'def')),
 ('Cursor', 'fetchone', (), {}, (4, FakeDatetime(2020, 4, 1, 0, 0), 'jkl')),
 ('Cursor', 'fetchone', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   'DROP TABLE IF EXISTS '
   'temp_tables..TempExtract_1f06e21d4a92c1896777b62d5c049705',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor', 'execute', ('select @@version', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor',
  'fetchone',
  (),
  {},
  ('Microsoft SQL Server 2017 (RTM-CU25) (KB5003830) - 14.0.3401.7 (X64) \n'
   '\tJun 25 2021 14:02:48 \n'
   '\tCopyright (C) 2017 Microsoft Corporation\n'
   '\tDeveloper Edition (64-bit) on Linux (Ubuntu 16.04.7 LTS)',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor', 'execute', ('SELECT schema_name()', {}), {}, None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('dbo',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   '                  SELECT CASE transaction_isolation_level\n'
   '                    WHEN 0 THEN NULL\n'
   "                    WHEN 1 THEN 'READ UNCOMMITTED'\n"
   "                    WHEN 2 THEN 'READ COMMITTED'\n"
   "                    WHEN 3 THEN 'REPEATABLE READ'\n"
   "                    WHEN 4 THEN 'SERIALIZABLE'\n"
   "                    WHEN 5 THEN 'SNAPSHOT' END AS "
   'TRANSACTION_ISOLATION_LEVEL\n'
   '                    FROM sys.dm_exec_sessions\n'
   '                    where session_id = @@SPID\n'
   '                  ',),
  {},
  None),
 ('Cursor', 'fetchone', (), {}, ('READ COMMITTED',)),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ("SELECT CAST('test max support' AS NVARCHAR(max))", {}),
  {},
  None),
 ('Cursor', 'description', (), {}, (('', 1, None, None, None, None, None),)),
 ('Cursor', 'fetchone', (), {}, ('test max support',)),
 ('Cursor', 'close', (), {}, None),
 ('Connection', 'rollback', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO temp_tables..TempExtract_test__pytest123 \n'
   'FROM (SELECT %(param_1)s AS foo) AS anon_1',
   {'param_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('\nDROP TABLE temp_tables..TempExtract_test__pytest123', {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_0 \n'
   'FROM (SELECT practice_registrations.patient_id AS patient_id, %(param_1)s '
   'AS patient_id_exists \n'
   'FROM (\n'
   '            SELECT RegistrationHistory.Patient_ID AS patient_id,\n'
   '                RegistrationHistory.StartDate AS date_start,\n'
   '                RegistrationHistory.EndDate AS date_end,\n'
   '                Organisation.Organisation_ID AS pseudo_id,\n'
   '                Organisation.Region as nuts1_region_name\n'
   '            FROM RegistrationHistory\n'
   '            LEFT OUTER JOIN Organisation ON '
   'RegistrationHistory.Organisation_ID = Organisation.Organisation_ID\n'
   '        ) AS practice_registrations \n'
   'WHERE practice_registrations.date_start <= %(date_start_1)s AND '
   'practice_registrations.date_end >= %(date_end_1)s GROUP BY '
   'practice_registrations.patient_id) AS anon_1',
   {'param_1': 1,
    'date_start_1': '2021-01-01T00:00:00',
    'date_end_1': '2021-01-01T00:00:00'}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_1 \n'
   'FROM (SELECT anon_2.date AS date, anon_2.patient_id AS patient_id \n'
   'FROM (SELECT clinical_events.date AS date, clinical_events.patient_id AS '
   'patient_id, row_number() OVER (PARTITION BY clinical_events.patient_id '
   'ORDER BY clinical_events.patient_id) AS _row_num \n'
   'FROM (SELECT [CTV3Code] AS code, [ConsultationDate] AS date, '
   '[NumericValue] AS numeric_value, [Patient_ID] AS patient_id \n'
   'FROM [CodedEvent]) AS clinical_events) AS anon_2 \n'
   'WHERE anon_2._row_num = %(row_num_1)s) AS anon_1',
   {'row_num_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO #group_table_2 \n'
   'FROM (SELECT anon_2.code AS code, anon_2.patient_id AS patient_id \n'
   'FROM (SELECT clinical_events.code AS code, clinical_events.patient_id AS '
   'patient_id, row_number() OVER (PARTITION BY clinical_events.patient_id '
   'ORDER BY clinical_events.patient_id) AS _row_num \n'
   'FROM (SELECT [CTV3Code] AS code, [ConsultationDate] AS date, '
   '[NumericValue] AS numeric_value, [Patient_ID] AS patient_id \n'
   'FROM [CodedEvent]) AS clinical_events) AS anon_2 \n'
   'WHERE anon_2._row_num = %(row_num_1)s) AS anon_1',
   {'row_num_1': 1}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT * INTO temp_tables..TempExtract_ddbd975bb572691df898a67329579a19 \n'
   'FROM (SELECT [#group_table_0].patient_id AS patient_id, '
   '[#group_table_1].date AS date, [#group_table_2].code AS event \n'
   'FROM [#group_table_0] LEFT OUTER JOIN [#group_table_1] ON '
   '[#group_table_0].patient_id = [#group_table_1].patient_id LEFT OUTER JOIN '
   '[#group_table_2] ON [#group_table_0].patient_id = '
   '[#group_table_2].patient_id \n'
   'WHERE [#group_table_0].patient_id_exists = 1) AS anon_1',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Cursor',
  'execute',
  ('CREATE INDEX '
   '[ix_temp_tables..TempExtract_ddbd975bb572691df898a67329579a19_patient_id] '
   'ON temp_tables..TempExtract_ddbd975bb572691df898a67329579a19 (patient_id)',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Cursor',
  'execute',
  ('SELECT TOP 32000 * \n'
   'FROM temp_tables..TempExtract_ddbd975bb572691df898a67329579a19 ORDER BY '
   'patient_id',
   {}),
  {},
  None),
 ('Cursor',
  'description',
  (),
  {},
  (('patient_id', 3, None, None, None, None, None),
   ('date', 4, None, None, None, None, None),
   ('event', 1, None, None, None, None, None))),
 ('Cursor', 'fetchone', (), {}, (1, FakeDatetime(2020, 1, 1, 0, 0), 'abc')),
 ('Cursor', 'fetchone', (), {}, None),
 ('Cursor', 'close', (), {}, None),
 ('Cursor',
  'execute',
  ('\n'
   'DROP TABLE IF EXISTS '
   'temp_tables..TempExtract_ddbd975bb572691df898a67329579a19',
   {}),
  {},
  None),
 ('Cursor', 'description', (), {}, None),
 ('Connection', 'commit', (), {}, None),
 ('Connection', 'rollback', (), {}, None)]
